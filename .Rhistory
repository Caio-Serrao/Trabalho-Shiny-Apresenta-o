sidebarMenu(
id = "pages",
menuItem("Many charts", tabName = "charts",
icon = icon("chart-line")),
menuItem("Statistics", tabName = "stats",
icon = icon("file-excel"),
menuSubItem("Team 1", tabName = "team1",
icon = icon("user")))
))
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
}
shinyApp(ui, server)
##### parte 05 ######
# Adicionando inputs na sidebar
sidebar <- dashboardSidebar(width = 300,
sidebarMenu(
id = "pages",
menuItem("Many charts", tabName = "charts",
icon = icon("chart-line")),
menuItem("A couple of checkboxes",
checkboxGroupInput("checkboxes",
"Days of the week",
choices = c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun")))
))
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
}
shinyApp(ui, server)
##### parte 06 ######
# Desativando a sidebar
sidebar <- dashboardSidebar(disable = TRUE)
ui <- dashboardPage(header, sidebar, body)
server <- function(input, output) {
}
shinyApp(ui, server)
git pull
n1 <- 4.5
p1 <- 0.45
p2 <- 0.55
n2 <- 6.8
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
round(nf)
round(nf, 2)
ceiling(nf)
round(nf, 2)
n1 <- 5
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
round(nf, 2)
n1 <- 6
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
round(nf, 2)
n1 <- 7
n1 <- 7
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
round(nf, 2)
n1 <- 7.5
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
round(nf, 2)
n1 <- 7.4
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
n1 <- 7.3
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
n1 <- 7.2
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
n1 <- 7
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
round(nf, 2)
n1 <- 10
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
round(nf, 2)
n1 <- 9
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
round(nf, 2)
n1 <- 10
n2 <- 7
p1 <- 0.45
p2 <- 0.55
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
round(nf, 2)
n1 <- 10
n2 <- 8
p1 <- 0.45
p2 <- 0.55
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
n1 <- 7.5
n2 <- 6.8
p1 <- 0.45
p2 <- 0.55
nf <- ((n1*p1) + (n2*p2)) / (p1+p2)
print(nf)
round(nf, 2)
ui <- fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
ui <- fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
library(shiny)
library(ggplot2)
ui <- fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
ui <- fluidPage(
textInput("name", "Insira um nome:"),
textOutput("q")
)  # ui = user interface
server <- function(input, output){
output$q <- renderText({
paste("Seja bem vindo ao nosso App,",
input$name, "?")
})
}
shinyApp(ui = ui, server = server)
if (interactive()) {
if (interactive()) {
ui <- fluidPage(
radioButtons("dist", "Tipo de distribuição:",
c("Normal" = "norm",
"Uniforme" = "unif",
"Log-normal" = "lnorm",
"Exponencial" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
if (interactive()) {
ui <- fluidPage(
radioButtons("dist", "Tipo de distribuição:",
c("Normal" = "norm",
"Uniforme" = "unif",
"Log-normal" = "lnorm",
"Exponencial" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
radioButtons("dist", "Tipo de distribuição:",
c("Normal" = "norm",
"Uniforme" = "unif",
"Log-normal" = "lnorm",
"Exponencial" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
shinyApp(ui, server)
}
ui <- fluidPage(
titlePanel("Central limit theorem"),
sidebarLayout(
sidebarPanel(
numericInput("m", "Number of samples:", 2, min = 1, max = 100)
),
mainPanel(
plotOutput("hist")
)
)
)
server <- function(input, output, session) {
output$hist <- renderPlot({
means <- replicate(1e4, mean(runif(input$m)))
hist(means, breaks = 20)
}, res = 96)
}
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Central limit theorem"),
sidebarLayout(
sidebarPanel(
numericInput("m", "Number of samples:", 2, min = 1, max = 100)
),
mainPanel(
plotOutput("hist")
)
)
)
server <- function(input, output, session) {
output$hist <- renderPlot({
means <- replicate(1e4, mean(runif(input$m)))
hist(means, breaks = 20)
}, res = 96)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Central limit theorem"),
sidebarLayout(
sidebarPanel(
numericInput("m", "Number of samples:", 2, min = 1, max = 100)
),
mainPanel(
plotOutput("hist")
)
)
)
server <- function(input, output, session) {
output$hist <- renderPlot({
means <- replicate(1e4, mean(runif(input$m)))
hist(means, breaks = 20)
}, res = 96)
}
shinyApp(ui = ui, server = server)
1e4-1
if (interactive()){
ui <- fluidPage(
checkboxGroupInput("variable", "Variáveis para mostrar:",
c("Cilindros" = "cyl",
"Transmissão" = "am",
# Definir a interface do usuário (UI)
ui <- fluidPage(
# Título do aplicativo
titlePanel("Exemplo de Shiny App com selectInput"),
# Layout com um sidebar e main panel
sidebarLayout(
# Sidebar com o selectInput
sidebarPanel(
selectInput("variable", "Escolha uma variável:",
choices = c("Cilindros" = "cyl",
"Transmissão" = "am",
# Definir a interface do usuário (UI)
ui <- fluidPage(
# Título do aplicativo
titlePanel("Exemplo de Shiny App com selectInput"),
# Layout com um sidebar e main panel
sidebarLayout(
# Sidebar com o selectInput
sidebarPanel(
selectInput("variable", "Escolha uma variavel:",
choices = c("Cilindros" = "cyl",
"Transmissão" = "am",
# Definir a interface do usuário (UI)
ui <- fluidPage(
# Título do aplicativo
titlePanel("Exemplo de Shiny App com selectInput"),
# Layout com um sidebar e main panel
sidebarLayout(
# Sidebar com o selectInput
sidebarPanel(
selectInput("variable", "Escolha uma variavel:",
choices = c("Cilindros" = "cyl",
"Transmissao" = "am",
"Marchas" = "gear"),
selected = "cyl")
),
# Main panel para exibir a tabela
mainPanel(
tableOutput("dataTable")
)
)
)
# Definir a lógica do servidor
server <- function(input, output) {
output$dataTable <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
# Rodar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Definir a interface do usuário (UI)
ui <- fluidPage(
# Título do aplicativo
titlePanel("Exemplo de Shiny App com checkboxGroupInput"),
# Layout com um sidebar e main panel
sidebarLayout(
# Sidebar com o checkboxGroupInput
sidebarPanel(
checkboxGroupInput("variables", "Escolha as variaveis:",
choices = c("Cilindros" = "cyl",
"Transmissao" = "am",
"Marchas" = "gear"),
selected = "cyl")
),
# Main panel para exibir a tabela
mainPanel(
tableOutput("dataTable")
)
)
)
# Definir a lógica do servidor
server <- function(input, output) {
output$dataTable <- renderTable({
req(input$variables)  # Requer que pelo menos uma variável seja selecionada
mtcars[, c("mpg", input$variables), drop = FALSE]
}, rownames = TRUE)
}
# Rodar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Definir a interface do usuário (UI)
ui <- fluidPage(
# Título do aplicativo
titlePanel("Exemplo de Shiny App com actionButton"),
# Layout com um sidebar e main panel
sidebarLayout(
# Sidebar com checkboxGroupInput e actionButton
sidebarPanel(
checkboxGroupInput("variables", "Escolha as variaveis:",
choices = c("Cilindros" = "cyl",
"Transmissao" = "am",
"Marchas" = "gear"),
selected = "cyl"),
actionButton("updateButton", "Atualizar Tabela")
),
# Main panel para exibir a tabela
mainPanel(
tableOutput("dataTable")
)
)
)
# Definir a lógica do servidor
server <- function(input, output, session) {
# Reatividade isolada para atualizar a tabela somente quando o botão é clicado
dataTable <- eventReactive(input$updateButton, {
req(input$variables)  # Requer que pelo menos uma variável seja selecionada
mtcars[, c("mpg", input$variables), drop = FALSE]
})
# Renderizar a tabela
output$dataTable <- renderTable({
dataTable()
}, rownames = TRUE)
}
# Rodar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Definir a interface do usuário (UI)
ui <- fluidPage(
# Título do aplicativo
titlePanel("Exemplo de Shiny App com sliderInput"),
# Layout com um sidebar e main panel
sidebarLayout(
# Sidebar com o sliderInput
sidebarPanel(
sliderInput(inputId = "mpgRange",
label = "Escolha o intervalo de mpg:",
min = min(mtcars$mpg),
max = max(mtcars$mpg),
value = c(min(mtcars$mpg), max(mtcars$mpg)))
),
# Main panel para exibir a tabela
mainPanel(
tableOutput("dataTable")
)
)
)
# Definir a lógica do servidor
server <- function(input, output) {
output$dataTable <- renderTable({
mtcars[mtcars$mpg >= input$mpgRange[1] & mtcars$mpg <= input$mpgRange[2], ]
}, rownames = TRUE)
}
# Rodar o aplicativo Shiny
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Título do aplicativo
titlePanel("Exemplo de Shiny App com sliderInput e Gráfico"),
# Layout com um sidebar e main panel
sidebarLayout(
# Sidebar com o sliderInput
sidebarPanel(
sliderInput("mpgRange",
"Escolha o intervalo de mpg:",
min = min(mtcars$mpg),
max = max(mtcars$mpg),
value = c(min(mtcars$mpg), max(mtcars$mpg)))
),
# Main panel para exibir o gráfico
mainPanel(
plotOutput("scatterPlot")
)
)
)
# Definir a lógica do servidor
server <- function(input, output) {
output$scatterPlot <- renderPlot({
filteredData <- mtcars[mtcars$mpg >= input$mpgRange[1] & mtcars$mpg <= input$mpgRange[2], ]
ggplot(filteredData, aes(x = wt, y = mpg)) +
geom_point() +
labs(title = "Grafico de Dispersão de MPG vs Peso",
x = "Peso (1000 lbs)",
y = "Milhas por Galão (mpg)") +
theme_minimal()
})
}
# Rodar o aplicativo Shiny
shinyApp(ui = ui, server = server)
#Definir a interface do usuário (UI)
ui <- fluidPage(
# Título do aplicativo
titlePanel("Exemplo de Shiny App com sliderInput e Gráfico"),
# Layout com um sidebar e main panel
sidebarLayout(
# Sidebar com o sliderInput
sidebarPanel(
sliderInput("mpgRange",
"Escolha o intervalo de mpg:",
min = min(mtcars$mpg),
max = max(mtcars$mpg),
value = c(min(mtcars$mpg), max(mtcars$mpg)))
),
# Main panel para exibir o gráfico
mainPanel(
plotOutput("scatterPlot")
)
)
)
# Definir a lógica do servidor
server <- function(input, output) {
output$scatterPlot <- renderPlot({
# Certifique-se de que os dados estão corretamente codificados
filteredData <- mtcars[mtcars$mpg >= input$mpgRange[1] & mtcars$mpg <= input$mpgRange[2], ]
# Use ggplot2 para criar o gráfico de dispersão
ggplot(filteredData, aes(x = wt, y = mpg)) +
geom_point() +
labs(title = "Gráfico de Dispersão de MPG vs Peso",
x = "Peso (1000 lbs)",
y = "Milhas por Galão (mpg)") +
theme_minimal()
})
}
# Rodar o aplicativo Shiny
shinyApp(ui = ui, server = server)
# Definir a interface do usuario (UI)
ui <- fluidPage(
# Titulo do aplicativo
titlePanel("Exemplo de Shiny App com sliderInput e Grafico"),
# Layout com um sidebar e main panel
sidebarLayout(
# Sidebar com o sliderInput
sidebarPanel(
sliderInput("mpgRange",
"Escolha o intervalo de mpg:",
min = min(mtcars$mpg),
max = max(mtcars$mpg),
value = c(min(mtcars$mpg), max(mtcars$mpg)))
),
# Main panel para exibir o grafico
mainPanel(
plotOutput("scatterPlot")
)
)
)
# Definir a logica do servidor
server <- function(input, output) {
output$scatterPlot <- renderPlot({
filteredData <- mtcars[mtcars$mpg >= input$mpgRange[1] & mtcars$mpg <= input$mpgRange[2], ]
ggplot(filteredData, aes(x = wt, y = mpg)) +
geom_point() +
labs(title = "Grafico de Dispersao de MPG vs Peso",
x = "Peso (1000 lbs)",
y = "Milhas por Galao (mpg)") +
theme_minimal()
})
}
# Rodar o aplicativo Shiny
shinyApp(ui = ui, server = server)
