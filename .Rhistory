?interactive()
f (interactive()) {
if (interactive()){
ui <- fluidPage(
checkboxGroupInput("variable", "Variáveis para mostrar:",
c("Cilindros" = "cyl",
"Transmissão" = "am",
"Marchas" = "gear")),
tableOutput("data")
)
server <- function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
}
library(shiny)
library(ggplot2)
if (interactive()) {
ui <- fluidPage(
radioButtons("dist", "Tipo de distribuição:",
c("Normal" = "norm",
"Uniforme" = "unif",
"Log-normal" = "lnorm",
"Exponencial" = "exp")),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
dist <- switch(input$dist,
norm = rnorm,
unif = runif,
lnorm = rlnorm,
exp = rexp,
rnorm)
hist(dist(500))
})
}
shinyApp(ui, server)
}
ui <- fluidPage(
selectInput("variable", "Variable:",
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")),
tableOutput("data")
)
server <- function(input, output) {
output$data <- renderTable({
mtcars[, c("mpg", input$variable), drop = FALSE]
}, rownames = TRUE)
}
shinyApp(ui, server)
if (interactive()) {
ui <- fluidPage(
dateInput("date1", "Data:", value = "2012-02-29"),
# O valor padrão é a data no fuso horário do cliente
dateInput("date2", "Data:"),
# O valor é sempre yyyy-mm-dd, mesmo se o formato de exibição for diferente
dateInput("date3", "Data:", value = "2012-02-29", format = "mm/dd/yy"),
# Passar um objeto Date
dateInput("date4", "Data:", value = Sys.Date()-10),
# Usar idioma diferente e primeiro dia da semana diferente
dateInput("date5", "Data:",
language = "ru",
weekstart = 1),
# Iniciar com a visão de década em vez da visão padrão de mês
dateInput("date6", "Data:",
startview = "decade")
)
shinyApp(ui, server = function(input, output) { })
}
if (interactive()) {
ui <- fluidPage(
numericInput("obs", "Observações:", 10, min = 1, max = 100),
verbatimTextOutput("value")
)
server <- function(input, output) {
output$value <- renderText({ input$obs })
}
shinyApp(ui, server)
}
if (interactive()) {
ui <- fluidPage(
sliderInput("obs", "Número de observações:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
)
# Lógica do servidor
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Aplicativo completo com componentes UI e servidor
shinyApp(ui, server)
}
runApp()
cls
clear()
clear
variaveis <- names(mtcars)
ui <- fluidPage(
selectInput(
inputId = "variavel_A",
label = "Variável A",
choices = variaveis
),
plotOutput(outputId = "histograma_A"),
selectInput(
inputId = "variavel_B",
label = "Variável B",
choices = variaveis,
selected = variaveis[2],
),
plotOutput(outputId = "histograma_B")
)
server <- function(input, output, session) {
output$histograma_A <- renderPlot({
print("Gerando histograma A...")
hist(mtcars[[input$variavel_A]], main = "Histograma A")
})
output$histograma_B <- renderPlot({
print("Gerando histograma B...")
hist(mtcars[[input$variavel_B]], main = "Histograma B")
})
}
shinyApp(ui, server)
variaveis <- names(mtcars)
ui <- fluidPage(
selectInput(
inputId = "variavel_A",
label = "Variável A",
choices = variaveis
),
plotOutput(outputId = "histograma_A"),
selectInput(
inputId = "variavel_B",
label = "Variável B",
choices = variaveis,
selected = variaveis[2],
),
plotOutput(outputId = "histograma_B")
)
server <- function(input, output, session) {
output$histograma_A <- renderPlot({
print("Gerando histograma A...")
hist(mtcars[[input$variavel_A]], main = "Histograma A")
})
output$histograma_B <- renderPlot({
print("Gerando histograma B...")
hist(mtcars[[input$variavel_B]], main = "Histograma B")
})
}
shinyApp(ui, server)
library(mtcars)
library(shiny)
library(shiny)
variaveis <- names(mtcars)
ui <- fluidPage(
selectInput(
inputId = "variavel_A",
label = "Variável A",
ui <- fluidPage(
selectInput(
inputId = "variavel_A",
label = "Variável A",
choices = variaveis
),
plotOutput(outputId = "histograma_A"),
selectInput(
inputId = "variavel_B",
label = "Variável B",
choices = variaveis,
selected = variaveis[2],
),
plotOutput(outputId = "histograma_B")
)
server <- function(input, output, session) {
library(shiny)
variaveis <- names(mtcars)
ui <- fluidPage(
selectInput(
inputId = "variavel_A",
label = "Variável A",
choices = variaveis
),
plotOutput(outputId = "histograma_A"),
selectInput(
inputId = "variavel_B",
label = "Variável B",
choices = variaveis,
selected = variaveis[2],
),
plotOutput(outputId = "histograma_B")
)
server <- function(input, output, session){
output$histograma_A <- renderPlot({
print("Gerando histograma A...")
hist(mtcars[[input$variavel_A]], main = "Histograma A")
})
output$histograma_B <- renderPlot({
print("Gerando histograma B...")
hist(mtcars[[input$variavel_B]], main = "Histograma B")
})
}
shinyApp(ui, server)
library(shiny)
variaveis <- names(mtcars)
ui <- fluidPage(
selectInput(
inputId = "variavel_A",
label = "Variável A",
choices = variaveis
),
plotOutput(outputId = "histograma_A"),
selectInput(
inputId = "variavel_B",
label = "Variável B",
choices = variaveis,
selected = variaveis[2],
),
plotOutput(outputId = "histograma_B")
)
server <- function(input, output, session){
output$histograma_A <- renderPlot({
print("Gerando histograma A...")
hist(mtcars[[input$variavel_A]], main = "Histograma A")
})
output$histograma_B <- renderPlot({
print("Gerando histograma B...")
hist(mtcars[[input$variavel_B]], main = "Histograma B")
})
}
shinyApp(ui = ui,server =  server)
ui <- fluidPage(
selectInput(
inputId = "variavel_A",
label = "Variável A",
choices = variaveis
),
plotOutput(outputId = "histograma_A"),
selectInput(
inputId = "variavel_B",
label = "Variável B",
choices = variaveis,
selected = variaveis[2],
),
plotOutput(outputId = "histograma_B")
)
server <- function(input, output, session){
output$histograma_A <- renderPlot({
print("Gerando histograma A...")
hist(mtcars[[input$variavel_A]], main = "Histograma A")
})
output$histograma_B <- renderPlot({
print("Gerando histograma B...")
hist(mtcars[[input$variavel_B]], main = "Histograma B")
})
}
shinyApp(ui = ui,server =  server)
library(shiny)
variaveis <- names(mtcars)
ui <- fluidPage(
selectInput(
inputId = 'var_a',
label = "variável A",
choices = variaveis
),
plotOutput(outputId = "hist_A"),
selectInput(
inputId = "var_b",
label = "variável B",
choices = variaveis,
selected = variaveis[2]
),
plotOutput(outputId = "hist_B")
)
server <- function(input, output, session){
output$histograma_A <- renderPlot({
print('Gerando histograma A...')
hist(mtcars[[input$variavel_A]], main = "histograma A")
})
output$histograma_B <- renderPlot({
print('Gerando histograma B...')
hist(mtcars[[input$variavel_B]], main = "histograma B")
})
}
shinyApp(ui = ui,server =  server)
runApp('C:/Users/thega/OneDrive - unb.br/unb/24.1/computação em estatística 2/seminário/teste.R')
runApp('C:/Users/thega/OneDrive - unb.br/unb/24.1/computação em estatística 2/seminário/teste.R')
runApp('C:/Users/thega/Downloads/seminario_ce2/teste.R')
runApp('C:/Users/thega/Downloads/seminario_ce2/teste.R')
runApp('C:/Users/thega/Downloads/seminario_ce2/teste.R')
runApp('C:/Users/thega/Downloads/seminario_ce2/teste.R')
variaveis <- names(mtcars)
ui <- fluidPage(
selectInput(
inputId = "variavel_A",
label = "Variável A",
choices = variaveis
),
plotOutput(outputId = "histograma_A"),
)
server <- function(input, output, session) {
output$histograma_A <- renderPlot({
print("Gerando histograma A...")
hist(mtcars[[input$variavel_A]], main = "Histograma A")
})
}
shinyApp(ui, server)
